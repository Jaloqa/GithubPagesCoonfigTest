import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const app = express();
const server = createServer(app);
const io = new Server(server, {
    cors: { 
      origin: "*", // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      allowedHeaders: ["Content-Type", "Authorization", "Accept"],
      credentials: false,
      transports: ['websocket', 'polling']
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Express
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],
  credentials: false
}));

app.use(express.json());

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–∞—Ö –∏ –∏–≥—Ä–æ–∫–∞—Ö
let rooms = {}; // { roomId: { players: [], gameStarted: false, characterAssignments: {} } }

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({ 
    message: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–æ–º —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!',
    rooms: Object.keys(rooms).length
  });
});

// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  socket.on('create-room', ({ playerName }) => {
    const roomId = generateRoomCode();
    
    if (!rooms[roomId]) {
      rooms[roomId] = {
        players: [],
        gameStarted: false,
        hostId: socket.id,
        characterAssignments: {}
      };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    rooms[roomId].players.push({
      id: socket.id,
      name: playerName,
      isHost: true
    });
    
    socket.join(roomId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–º–Ω–∞—Ç—ã
    socket.emit('room-created', {
      success: true,
      roomCode: roomId,
      playerId: socket.id,
      isHost: true
    });
    
    console.log(`–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId} –∏–≥—Ä–æ–∫–æ–º ${playerName}`);
  });
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('join-room', ({ roomCode, playerName }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    if (!rooms[roomCode]) {
      socket.emit('room-joined', {
        success: false,
        error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    rooms[roomCode].players.push({
      id: socket.id,
      name: playerName,
      isHost: false
    });
    
    socket.join(roomCode);
    
    // –°–æ–æ–±—â–∞–µ–º –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    socket.broadcast.to(roomCode).emit('player-joined', socket.id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–º—É—Å—è –∏–≥—Ä–æ–∫—É
      socket.emit('room-joined', {
        success: true,
        roomCode,
      playerId: socket.id,
        isHost: false
      });
      
      // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
      io.to(roomCode).emit('room-updated', {
      players: rooms[roomCode].players,
      gameStarted: rooms[roomCode].gameStarted
      });
      
      console.log(`–ò–≥—Ä–æ–∫ ${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
      });
      
  // WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥
  socket.on('signal', ({ to, signal }) => {
    io.to(to).emit('signal', { from: socket.id, signal });
  });
  
  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  socket.on('start-game', ({ roomCode }) => {
    const room = rooms[roomCode];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç —Ö–æ—Å—Ç–∞
    if (room && room.hostId === socket.id) {
      room.gameStarted = true;
      
      // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const playerIds = room.players.map(player => player.id);
      room.characterAssignments = assignCharacters(playerIds);
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        io.to(roomCode).emit('game-started', {
          gameStarted: true,
        characterAssignments: room.characterAssignments
      });
      
      console.log(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
    }
  });

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  socket.on('assign-character', ({ roomCode, targetPlayerId, character }) => {
    const room = rooms[roomCode];
    
    if (room && room.gameStarted) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
      if (!room.characters) room.characters = {};
      room.characters[targetPlayerId] = character;
      
      // –û–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
      io.to(targetPlayerId).emit('character-assigned', {
        character,
        assignedBy: socket.id
      });
      
      console.log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ "${character}" –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–≥—Ä–æ–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log('–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –∏–≥—Ä–æ–∫
    for (let roomId in rooms) {
      let room = rooms[roomId];
      
      // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
      const playerIndex = room.players.findIndex(p => p.id === socket.id);
      
      if (playerIndex !== -1) {
        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        room.players.splice(playerIndex, 1);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ö–æ—Å—Ç, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        if (room.hostId === socket.id) {
          if (room.players.length > 0) {
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            room.hostId = room.players[0].id;
            room.players[0].isHost = true;
          } else {
            // –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
            delete rooms[roomId];
            continue;
          }
        }
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        socket.broadcast.to(roomId).emit('player-left', socket.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
        io.to(roomId).emit('room-updated', {
          players: room.players,
          gameStarted: room.gameStarted
        });
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('get-players', ({ roomCode }) => {
    console.log(`–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode} –æ—Ç ${socket.id}`);
    
    const room = rooms[roomCode];
    if (!room) {
      socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    socket.emit('room-updated', {
      players: room.players,
      gameStarted: room.gameStarted,
      characterAssignments: room.characterAssignments,
      characters: room.characters
    });
  });
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã (4 —Å–∏–º–≤–æ–ª–∞)
function generateRoomCode() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  let code = '';
  for (let i = 0; i < 4; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
function assignCharacters(playerIds) {
  const assignments = {};
  
  // –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –ø–æ –∫—Ä—É–≥—É
  for (let i = 0; i < playerIds.length; i++) {
    const currentPlayerId = playerIds[i];
    const targetPlayerId = playerIds[(i + 1) % playerIds.length];
    assignments[currentPlayerId] = targetPlayerId;
  }
  
  return assignments;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const port = process.env.PORT || 3002;
server.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});