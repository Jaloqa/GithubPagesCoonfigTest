// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ª–∏ —É–∂–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
if (typeof global === 'undefined') {
  window.global = window;
}

if (typeof process === 'undefined' || !process.browser) {
  window.process = window.process || {};
  window.process.browser = true;
  window.process.env = window.process.env || {};
}

if (typeof Buffer === 'undefined') {
  window.Buffer = window.Buffer || {
    from: (arr) => new Uint8Array(arr),
    alloc: (size) => new Uint8Array(size),
    allocUnsafe: (size) => new Uint8Array(size),
    isBuffer: () => false
  };
}

import socketApi from './socketApi';
import Peer from 'simple-peer';

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è VideoApi —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebRTC –∏ simple-peer
class VideoApi {
  constructor() {
    this.peers = {};
    this.connectedPlayers = new Set();
    this.localStream = null;
    this.onRemoteStream = null;
    this.onRemoteStreamRemoved = null;
    this.myPlayerId = null;
    this.roomId = null;
    this.initialized = false;
    this.animationFrames = [];
    this.canvasStreams = {};
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ WebRTC –ø–∏—Ä–∞
  createPeer(playerId, initiator, initialSignal = null) {
    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${playerId} (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${initiator})`);
    
    if (this.peers[playerId]) {
      console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${playerId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return;
    }

    const options = {
      initiator,
      trickle: false,
      stream: this.localStream,
      config: {
        iceServers: [
          { urls: 'stun:stun1.l.google.com:19302' },
          { urls: 'stun:stun2.l.google.com:19302' },
          { urls: 'stun:stun3.l.google.com:19302' },
          { urls: 'stun:stun4.l.google.com:19302' },
          { urls: 'stun:stun5.l.google.com:19302' },
          { urls: 'stun:stun6.l.google.com:19302' },
          { urls: 'stun:stun7.l.google.com:19302' },
          { urls: 'stun:stun8.l.google.com:19302' },
          { urls: 'stun:stun9.l.google.com:19302' },
          { urls: 'stun:stun10.l.google.com:19302' },
          { urls: 'stun:stun11.l.google.com:19302' },
          { urls: 'stun:stun12.l.google.com:19302' },
          { urls: 'stun:stun13.l.google.com:19302' },
          { urls: 'stun:stun14.l.google.com:19302' },
          { urls: 'stun:stun15.l.google.com:19302' },
          { urls: 'stun:stun16.l.google.com:19302' },
          { urls: 'stun:stun17.l.google.com:19302' },
          { urls: 'stun:stun18.l.google.com:19302' },
          { urls: 'stun:stun19.l.google.com:19302' },
          { urls: 'stun:stun20.l.google.com:19302' }
        ],
        iceTransportPolicy: 'all',
        iceCandidatePoolSize: 10
      }
    };
    
    try {
      const peer = new Peer(options);
      
      peer.on('error', (err) => {
        console.error(`–û—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å ${playerId}:`, err);
        this.handlePeerError(playerId, err);
      });

      peer.on('connect', () => {
        console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å ${playerId}`);
        this.connectedPlayers.add(playerId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (this.localStream) {
          const videoTrack = this.localStream.getVideoTracks()[0];
          if (videoTrack) {
            console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–∞ –¥–ª—è ${playerId}:`, {
              enabled: videoTrack.enabled,
              readyState: videoTrack.readyState,
              muted: videoTrack.muted
            });
          }
        }
      });

      peer.on('close', () => {
        console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å ${playerId}`);
        this.handlePeerClose(playerId);
      });

      peer.on('stream', (stream) => {
        console.log(`–ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç ${playerId}`);
        if (this.onRemoteStream) {
          stream.playerId = playerId;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
          const videoTrack = stream.getVideoTracks()[0];
          if (videoTrack) {
            console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–∞ –æ—Ç ${playerId}:`, {
              enabled: videoTrack.enabled,
              readyState: videoTrack.readyState,
              muted: videoTrack.muted
            });
          }
          
          this.onRemoteStream(playerId, stream);
        }
      });

      peer.on('signal', (signal) => {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∫ ${playerId}`);
        socketApi.emit('signal', { to: playerId, signal });
      });

      if (!initiator && initialSignal) {
        peer.signal(initialSignal);
      }

      this.peers[playerId] = peer;
      return peer;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ä–∞ –¥–ª—è ${playerId}:`, error);
      this.handlePeerError(playerId, error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∏—Ä–∞
  handlePeerError(playerId, error) {
    if (this.peers[playerId]) {
      this.peers[playerId].destroy();
      delete this.peers[playerId];
    }
    this.connectedPlayers.delete(playerId);
    
    if (this.onRemoteStreamRemoved) {
      this.onRemoteStreamRemoved(playerId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∏—Ä–∞
  handlePeerClose(playerId) {
    delete this.peers[playerId];
    this.connectedPlayers.delete(playerId);
    
    if (this.onRemoteStreamRemoved) {
      this.onRemoteStreamRemoved(playerId);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∏–∑ –∫–∞–Ω–≤–∞—Å–∞
  async createCanvasStream() {
    const canvas = document.createElement('canvas');
    canvas.width = 640;
    canvas.height = 480;
    const ctx = canvas.getContext('2d');
    
    let hue = 0;
    const text = '–ù–µ—Ç –∫–∞–º–µ—Ä—ã';
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    const animate = () => {
      // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞
      ctx.fillStyle = '#1a1625';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // –†–∏—Å—É–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é —Ä–∞–º–∫—É
      const borderWidth = 4;
      ctx.strokeStyle = `hsl(${hue}, 70%, 60%)`;
      ctx.lineWidth = borderWidth;
      ctx.strokeRect(borderWidth/2, borderWidth/2, 
                    canvas.width - borderWidth, 
                    canvas.height - borderWidth);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç
      hue = (hue + 1) % 360;
      
      // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
      ctx.font = '48px Arial';
      ctx.fillStyle = '#ffffff';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(text, canvas.width/2, canvas.height/2);
      
      // –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –∫–∞–º–µ—Ä—ã
      ctx.font = '36px Arial';
      ctx.fillText('üé•', canvas.width/2, canvas.height/2 - 60);
      
      const animFrameId = requestAnimationFrame(animate);
      this.animationFrames.push(animFrameId);
    };
    
    animate();
    
    const stream = canvas.captureStream(30);
    stream.isCanvasStream = true;
    return stream;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–∫–µ—Ç–æ–≤ –∏ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  setupSocketListeners(roomId) {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    socketApi.off('signal');
    socketApi.off('player-joined');
    socketApi.off('player-left');
    socketApi.off('all-players');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socketApi.emit('join-room', { roomId });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    socketApi.on('all-players', (players) => {
      console.log('–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ:', players);
      players.forEach(playerId => {
        if (playerId !== this.myPlayerId && !this.connectedPlayers.has(playerId)) {
          console.log(`–°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º ${playerId}`);
          this.createPeer(playerId, true);
        }
      });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    socketApi.on('player-joined', (playerId) => {
      console.log('–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', playerId);
      if (playerId !== this.myPlayerId && !this.connectedPlayers.has(playerId)) {
        console.log(`–°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–≥—Ä–æ–∫–æ–º ${playerId}`);
        this.createPeer(playerId, false);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    socketApi.on('player-left', (playerId) => {
      console.log('–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª:', playerId);
      this.connectedPlayers.delete(playerId);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (this.peers[playerId]) {
        this.peers[playerId].destroy();
        delete this.peers[playerId];
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
      if (this.onRemoteStreamRemoved) {
        this.onRemoteStreamRemoved(playerId);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
    socketApi.on('signal', ({ from, signal }) => {
      console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç:', from);
      
      // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º
      if (this.peers[from]) {
        if (this.peers[from].connected) {
          try {
            console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${from}`);
            this.peers[from].signal(signal);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞:', err);
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–∏—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.handlePeerError(from, err);
            this.createPeer(from, false, signal);
          }
        } else {
          console.warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', from, '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
          this.createPeer(from, false, signal);
        }
      } else {
        console.warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', from, '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
        this.createPeer(from, false, signal);
      }
    });
  }
  
  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
  toggleVideo(enabled) {
    if (this.localStream) {
      const videoTracks = this.localStream.getVideoTracks();
      if (videoTracks.length > 0) {
        videoTracks.forEach(track => {
          track.enabled = enabled;
        });
        return true;
      }
    }
    return false;
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  toggleAudio(enabled) {
    if (this.localStream) {
      const audioTracks = this.localStream.getAudioTracks();
      if (audioTracks.length > 0) {
        audioTracks.forEach(track => {
          track.enabled = enabled;
        });
        return true;
      }
    }
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–µ—Ä—ã
  isVideoEnabled() {
    return this.localStream && this.localStream.getVideoTracks().length > 0;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  isAudioEnabled() {
    return this.localStream && this.localStream.getAudioTracks().length > 0;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  stop() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
      this.localStream = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    Object.values(this.peers).forEach(peer => {
      if (peer && typeof peer.destroy === 'function') {
        peer.destroy();
      }
    });
    this.peers = {};
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    socketApi.off('signal');
    socketApi.off('player-joined');
    socketApi.off('player-left');
    socketApi.off('all-players');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    this.animationFrames.forEach(id => {
      cancelAnimationFrame(id);
    });
    this.animationFrames = [];
    
    // –£–¥–∞–ª–µ–Ω–∏–µ canvas —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const canvasElements = document.querySelectorAll('canvas[id^="canvas-"]');
    canvasElements.forEach(canvas => {
      canvas.remove();
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
    this.canvasStreams = {};
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.initialized = false;
    this.connectedPlayers.clear();
    this.roomId = null;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ç–æ–∫–µ
  getStreamInfo(stream) {
    if (!stream) return null;
    
    return {
      isCanvas: stream.isCanvasStream || false,
      canvasId: stream.canvasId || null,
      videoTracks: stream.getVideoTracks().length,
      audioTracks: stream.getAudioTracks().length
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
  async init(roomId) {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Video API —Å WebRTC –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
    this.roomId = roomId;
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
      this.localStream = null;
    }
    
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã...`);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –Ω—É–∂–µ–Ω
        const stream = await navigator.mediaDevices.getUserMedia({
          video: {
            width: { ideal: 640 },
            height: { ideal: 480 },
            frameRate: { ideal: 30 }
          },
          audio: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        });
        
        console.log('–ú–µ–¥–∏–∞–ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ: –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–æ–≤:', stream.getVideoTracks().length, 
                    ', –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤:', stream.getAudioTracks().length);
        
        const videoTrack = stream.getVideoTracks()[0];
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–∞:', videoTrack.getSettings());
        
        this.localStream = stream;
        break;
      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
        
        if (error.name === 'NotReadableError' && retryCount < maxRetries - 1) {
          console.log('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–æ, –∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          retryCount++;
          continue;
        }
        
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã:', error);
        console.log('–°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –∏–∑ –∫–∞–Ω–≤–∞—Å–∞ –≤–º–µ—Å—Ç–æ –∫–∞–º–µ—Ä—ã');
        this.localStream = await this.createCanvasStream();
        break;
      }
    }

    this.initialized = true;
    return this.localStream;
  }
}

const videoApi = new VideoApi();
export default videoApi; 