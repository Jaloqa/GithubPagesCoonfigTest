import React, { useEffect, useRef, useState } from 'react';
import styles from './GamePage.module.css';
import videoApi from '../../shared/api/videoApi';

const PlayerVideo = ({ 
  stream, 
  playerId, 
  playerName, 
  character, 
  isCurrentPlayer, 
  isVideoEnabled = true, 
  isAudioEnabled = true, 
  muted 
}) => {
  const videoRef = useRef(null);
  const [hasVideo, setHasVideo] = useState(false);
  const [videoError, setVideoError] = useState(null);
  const [videoStatus, setVideoStatus] = useState('connecting'); // 'connecting', 'active', 'error'

  useEffect(() => {
    console.log('PlayerVideo: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è', playerId, stream ? `–í–∏–¥–µ–æ—Ç—Ä–µ–∫–æ–≤: ${stream.getVideoTracks().length}, –ê—É–¥–∏–æ—Ç—Ä–µ–∫–æ–≤: ${stream.getAudioTracks().length}` : '–Ω–µ—Ç –ø–æ—Ç–æ–∫–∞');
    
    if (!stream || !videoRef.current) {
      console.log('–ù–µ—Ç –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞', playerId, '–∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—ç–ª–µ–º–µ–Ω—Ç');
      return;
    }

    const videoElement = videoRef.current;
    const videoTrack = stream.getVideoTracks()[0];
    
    if (videoTrack) {
      console.log('–í–∏–¥–µ–æ—Ç—Ä–µ–∫ –¥–ª—è', playerId, ':', {
        enabled: videoTrack.enabled,
        active: videoTrack.active,
        type: videoTrack.kind,
        readyState: videoTrack.readyState,
        muted: videoTrack.muted
      });
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ
    if (videoElement.srcObject) {
      console.log('–û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è', playerId);
      videoElement.srcObject = null;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    videoElement.srcObject = stream;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const handlePlay = () => {
      console.log('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è', playerId);
    };

    const handleError = (error) => {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error);
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      setTimeout(() => {
        if (videoElement.paused) {
          console.log('–ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è', playerId);
          videoElement.play().catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', err);
          });
        }
      }, 1000);
    };

    const handleLoadedMetadata = () => {
      console.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è', playerId);
      // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      videoElement.play().catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', err);
      });
    };

    videoElement.addEventListener('play', handlePlay);
    videoElement.addEventListener('error', handleError);
    videoElement.addEventListener('loadedmetadata', handleLoadedMetadata);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ PlayerVideo –¥–ª—è', playerId);
      videoElement.removeEventListener('play', handlePlay);
      videoElement.removeEventListener('error', handleError);
      videoElement.removeEventListener('loadedmetadata', handleLoadedMetadata);
      
      if (videoElement.srcObject) {
        videoElement.srcObject.getTracks().forEach(track => track.stop());
        videoElement.srcObject = null;
      }
    };
  }, [stream, playerId]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ
  const handleVideoError = (error) => {
    console.error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è ${playerId}:`, error);
    setVideoError(error.message || '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ');
    setHasVideo(false);
    setVideoStatus('error');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  const handleVideoPlay = () => {
    console.log(`–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è ${playerId}`);
    setVideoStatus('active');
    setHasVideo(true);
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤–∏–¥–µ–æ
  const showVideo = stream && 
    (hasVideo || stream.getVideoTracks().length > 0 || stream.isCanvasStream);

  return (
    <div className={styles.playerVideoContainer}>
      {stream ? (
        <div className={styles.videoWrapper}>
          <video
            ref={videoRef}
            className={styles.playerVideo}
            autoPlay
            playsInline
            muted={muted}
            onError={handleVideoError}
            onPlay={handleVideoPlay}
          />
          <div className={`${styles.videoStatus} ${styles[`videoStatus${videoStatus.charAt(0).toUpperCase() + videoStatus.slice(1)}`]}`}>
            <span className={styles.streamIcon}>
              {videoStatus === 'connecting' && '‚åõ'}
              {videoStatus === 'active' && '‚úì'}
              {videoStatus === 'error' && '‚úó'}
            </span>
          </div>
        </div>
      ) : (
        <div className={styles.placeholderVideo}>
          <div className={styles.placeholderContent}>
            <span role="img" aria-label="user">üë§</span>
            <div className={styles.noVideoText}>
              {videoError ? '–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ' : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'}
            </div>
            <div className={styles.spinnerContainer}>
              <div className={styles.spinner}></div>
            </div>
          </div>
        </div>
      )}
      {!isVideoEnabled && stream && (
        <div className={styles.videoDisabled}>
          <span className={styles.noVideoIcon}>üé•</span>
        </div>
      )}
      <div className={styles.playerInfo}>
        <div className={styles.playerName}>
          {playerName || `–ò–≥—Ä–æ–∫ ${playerId?.substring(0, 4) || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}`} {isCurrentPlayer && ' (–í—ã)'}
        </div>
        {character && (
          <div className={styles.playerCharacter}>
            –ü–µ—Ä—Å–æ–Ω–∞–∂: {isCurrentPlayer ? '???' : character}
          </div>
        )}
        {!isAudioEnabled && (
          <div className={styles.mediaControls}>
            <span className={styles.mutedIcon}>üîá</span>
          </div>
        )}
      </div>
    </div>
  );
};

export default PlayerVideo; 